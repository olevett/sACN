/* Arduino library for sending and receiving sACN lighting protocoll ANSI E1.31
 *
 * (c) 2022 stefan staub
 * Released under the MIT License
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifndef SACNDEFS_H
#define SACNDEFS_H

#include "Arduino.h"

// buffer
#define SACN_BUFFER_MIN 126
#define SACN_BUFFER_MAX 638
#define DMX_SLOTS_MAX   512

// Ethernet
#define ACN_SDT_MULTICAST_PORT 5568

// DMX Universes
#define UNIVERSE_MAX 63999

// Startcodes
#define STARTCODE_DMX    0x00
#define STARTCODE_DD     0xDD
#define STARTCODE_RDM    0xCC
#define STARTCODE_ASCII  0x17
#define STARTCODE_TEST   0x55
#define STARTCODE_UTF8   0x90
#define STARTCODE_SIP    0xCF

// Priorities
#define PRIORITY_STANDARD 100
#define PRIORITY_MAX      200

// Option Flags
#define PREVIEW_DATA      0x80 // Bit 7
#define STREAM_TERMINATED 0x40 // Bit 6
#define FORCE_SYNC        0x10 // Bit 5

// Timing Variables and others in ms
#define E131_NETWORK_DATA_LOSS_TIMEOUT 2500 // ms

// timing constants for extensions
#define SACN_POLLING_TIME    800 // 800 ms initialize 3 times in 1 s
#define SACN_POLLING_TIME_DD 800 // 800 ms initialize and on change 3 times in 1 s

// sACN const values and variables

// Root Layer RLP
#define PREAMBLE_ADDR 0
#define PREAMBLE_SIZE 2
const uint8_t PREAMBLE[2] = {0x00, 0x10};
#define POSTAMBLE_ADDR 2
#define POSTAMBLE_SIZE 2
const uint8_t POSTAMBLE[2] = {0x00, 0x00};
#define ACN_IDENTIFIER_ADDR 4
#define ACN_IDENTIFIER_SIZE 12
const uint8_t ACN_IDENTIFIER[12] = {0x41, 0x53, 0x43, 0x2D, 0x45, 0x31, 0x2E, 0x31, 0x37, 0x00, 0x00, 0x00}; // "ASC-E1.17\0\0\0"
#define ROOT_FLAGS_AND_LENGTH_ADDR 16
#define ROOT_FLAGS_AND_LENGTH_SIZE 2
const uint8_t ROOT_FLAGS_AND_LENGTH[ROOT_FLAGS_AND_LENGTH_SIZE] = {0x72,0x6E}; // SACN_BUFFER_MAX - ROOT_FLAGS_AND_LENGTH_ADDR + 0x7000
#define VECTOR_ROOT_E131_DATA_ADDR 18
#define VECTOR_ROOT_E131_DATA_SIZE 4
const uint8_t VECTOR_ROOT_E131_DATA[VECTOR_ROOT_E131_DATA_SIZE] = {0x00, 0x00, 0x00, 0x04};
#define CID_ADDR 22
#define CID_SIZE 16

// Framing Layer
#define FRAMING_FLAGS_AND_LENGTH_ADDR 38
#define FRAMING_FLAGS_AND_LENGTH_SIZE 2
const uint8_t FRAMING_FLAGS_AND_LENGTH[FRAMING_FLAGS_AND_LENGTH_SIZE] = {0x72, 0x58}; // SACN_BUFFER_MAX - FRAMING_FLAGS_AND_LENGTH_ADDR + 0x7000
#define VECTOR_E131_DATA_PACKET_ADDR 40
#define VECTOR_E131_DATA_PACKET_SIZE 4
const uint8_t VECTOR_E131_DATA_PACKET[VECTOR_E131_DATA_PACKET_SIZE] = {0x00, 0x00, 0x00, 0x02};
#define SOURCE_NAME_ADDR 44
#define SOURCE_NAME_SIZE 64
#define PRIORITY_ADDR 108
#define PRIORITY_SIZE 1
#define SYNC_PACKET_ADDR 109
#define SYNC_PACKET_SIZE 2
#define SEQ_NUM_ADDR 111
#define SEQ_NUM_SIZE 1
#define OPTIONS_ADDR 112
#define OPTIONS_SIZE 1
#define UNIVERSE_ADDR 113
#define UNIVERSE_SIZE 2

// DMP Layer
#define DMP_FLAGS_AND_LENGTH_ADDR 115
#define DMP_FLAGS_AND_LENGTH_SIZE 2
const uint8_t DMP_FLAGS_AND_LENGTH[DMP_FLAGS_AND_LENGTH_SIZE] = {0x72, 0x0B}; // SACN_BUFFER_MAX - DMP_FLAGS_AND_LENGTH_ADDR + 0x7000
#define VECTOR_DMP_SET_PROPERTY_ADDR 117
#define VECTOR_DMP_SET_PROPERTY_SIZE 1
#define VECTOR_DMP_SET_PROPERTY 0x02
#define DMP_ADDRESS_AND_DATA_ADDR 118
#define DMP_ADDRESS_AND_DATA_SIZE 1
#define DMP_ADDRESS_AND_DATA 0xa1
#define FIRST_PROPERTY_ADDRESS_ADDR 119
#define FIRST_PROPERTY_ADDRESS_SIZE 2
const uint8_t FIRST_PROPERTY_ADDRESS[FIRST_PROPERTY_ADDRESS_SIZE] = {0x00, 0x00};
#define ADDRESS_INC_ADDR 121
#define ADDRESS_INC_SIZE 2
const uint8_t ADDRESS_INC[ADDRESS_INC_SIZE] = {0x00, 0x01};
#define PROPERTY_VALUE_COUNT_ADDR 123
#define PROPERTY_VALUE_COUNT_SIZE 2
const uint8_t PROPERTY_VALUE_COUNT[] {0x02, 0x01}; // DMX_SLOTS_MAX + 1
#define STARTCODE_ADDR 125
#define STARTCODE_SIZE 1
#define DMX_VALUES_ADDR 126

/* Extension for E1.31 Synchronistation Packet
#define VECTOR_ROOT_E131_EXTENDED_ADDR40
#define VECTOR_ROOT_E131_EXTENDED_SIZE 4
const uint8_t VECTOR_ROOT_E131_EXTENDED[VECTOR_ROOT_E131_EXTENDED_SIZE] {0x00, 0x00, 0x00, 0x08};
#define VECTOR_E131_EXTENDED_SYNCHRONIZATION_ADDR 40
#define VECTOR_E131_EXTENDED_SYNCHRONIZATION_SIZE 4
const uint8_t VECTOR_E131_EXTENDED_SYNCHRONIZATION[VECTOR_E131_EXTENDED_SYNCHRONIZATION_SIZE] {0x00, 0x00, 0x00, 0x01};
#define SYNC_PACKET_ADDR 109
#define SYNC_PACKET_SIZE 2
#define SYNC_UINVERSE_ADDR 112
#define SYNC_UINVERSE_SIZE 2
uint16_t syncUniverse;
*/

/* Extension for E1.31 Universe Discovery Packet
#define E131_E131_UNIVERSE_DISCOVERY_INTERVAL 10000
#define VECTOR_E131_EXTENDED_DISCOVERY_ADDR 40
#define VECTOR_E131_EXTENDED_DISCOVERY_SIZE 4
const uint8_t VECTOR_E131_EXTENDED_DISCOVERY[VECTOR_E131_EXTENDED_DISCOVERY_SIZE] {0x00, 0x00, 0x00, 0x02};
#define VECTOR_UNIVERSE_DISCOVERY_UNIVERSE_LIST_ADDR 114
#define VECTOR_UNIVERSE_DISCOVERY_UNIVERSE_LIST_SIZE 4
const uint8_t VECTOR_UNIVERSE_DISCOVERY_UNIVERSE_LIST[VECTOR_UNIVERSE_DISCOVERY_UNIVERSE_LIST_SIZE] = {0xFA, 0x00, 0x00, 0xD1};
#define DISCOVERY_FIRST_PAGE_ADDR 118
#define DISCOVERY_FIRST_PAGE_SIZE 1
uint8_t discoveryFirstPage;
#define DISCOVERY_LAST_PAGE_ADDR 119
#define DISCOVERY_LAST_PAGE_SIZE 1
uint8_t discoveryLastPage;
#define DISCOVERY_UNIVERSES_ADDR 120
#define DISCOVERY_UNIVERSES_SIZE 2
uint16_t discoveryUniverses[512]; // up to 512 universes (16 bit)
const uint8_t E131_DISCOVERY_UNIVERSE[2] = {0xFA, 0xD6}; // 64214
*/

// RDM

// RDMnet

#endif
